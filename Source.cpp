//Завдання №1
//Створіть шаблонний клас однозв’язного списку для
//роботи з цілими значеннями.Потрібно створити реалізації для типових операцій над елементами :
//■ AddToHead — додавання елемента до голови списку;
//■ AddToTail — додавання елемента до хвоста списку;
//■ DeleteFromHead — видалення елемента з голови списку;
//■ DeleteFromTail — видалення елемента з хвоста списку;
//■ DeleteAll — видалення всіх елементів;
//■ Show — виведення всіх елементів списку на екран.
//
//Завдання №2
//Додати в клас із завдання 1 наступні функції : вставлення елемента в задану позицію, видалення елемента
//із заданої позиції, пошук заданого елемента(функція
//	повертає позицію знайденого елемента в разі успіху або
//	NULL в разі невдачі), пошук і заміна заданого елемента
//	(функція повертає кількість замінених елементів в разі
//		успіху або - 1 у випадку невдачі), перевертання списку.

#include <iostream>
using namespace std;
#include "Node.h"
#include "List.h"



int main()
{
	Node node1(5); // создаем данные
	node1.print();
	node1 = 10;
	node1.print();
	Node node2(15);
	Node node3(20);
	Node node4(5);
	Node node5(25);
	List <Node> newList(&node1); // создаем список +1 элемент
	newList.show();
	cout << "===================================================="<< endl;
	newList.addToHead(&node2); // добавляем 
	newList.addToHead(&node3);
	newList.addToTail(&node4);
	newList.show(); // выводим  5 10 15 20
	cout << "===================================================="<< endl;
	newList.deleteFromTail();  // удаляем с хвоста
	newList.deleteFromHead();  // удаляем с головы
	newList.show();
	cout << "====================================================" << endl;
	Node node6(58);
	Node node7(77);
	newList.addToHead(&node6);
	newList.addToHead(&node7);
	newList.show();
	cout << "====================================================" << endl;
	newList.addToPosition(&node5, 3);  // на 3 позицию стами !!!! СДЕЛАЛ СО СМЕЩЕНИЕМ БЕЗ УДАЛЕНИЯ!!!!
	newList.show();
	cout << "====================================================" << endl;
	newList.deleteFromPosition(4);  // удаляем с позиции
	newList.show();
	cout << "====================================================" << endl;
	cout << "Element pos: " << newList.findElement(77) << endl;  // ищем и находим
	cout << "Element pos: " << newList.findElement(1505) << endl;  // не находим
	cout << "====================================================" << endl;
	newList.changeElement(1);  // меняем первый элемент  
	newList.show();
	cout << "====================================================" << endl;
	newList.reverse();  // разворачиваем
	newList.show();
	cout << "====================================================" << endl;
	newList.deleteAll();  // удаляем) если это можно так назвать))) нужно было делать в динамике тогда бы что то чистил))
	newList.show();

	return 0;
}